-- Create notifications table
create table public.notifications (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  title text not null,
  content text not null,
  category text not null, -- 'announcement', 'event', 'points', 'system'
  priority text not null default 'normal', -- 'low', 'normal', 'high', 'urgent'
  image_url text,
  action_url text,
  created_by text,
  is_broadcast boolean not null default false -- if true, it's sent to all users
);

-- Create member_notifications junction table for tracking which members received notifications
create table public.member_notifications (
  id bigint generated by default as identity primary key,
  notification_id bigint references public.notifications(id) on delete cascade not null,
  member_id bigint references public.members(id) on delete cascade not null,
  read_at timestamp with time zone, -- null means unread
  dismissed_at timestamp with time zone, -- null means not dismissed
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(notification_id, member_id)
);

-- Enable Row Level Security for both tables
alter table public.notifications enable row level security;
alter table public.member_notifications enable row level security;

-- Notifications policies
create policy "Allow organizers to create notifications" on public.notifications
  for insert to authenticated
  with check (
    exists (
      select 1 from members
      where members.user_id = auth.uid()
      and (members.title = 'Organiser' or members.title = 'Admin')
    )
  );

create policy "Allow all to view notifications" on public.notifications
  for select
  using (true);

-- Member notifications policies
create policy "Allow members to view their own notifications" on public.member_notifications
  for select using (
    exists (
      select 1 from members
      where members.id = member_id
      and members.user_id = auth.uid()
    )
  );

create policy "Allow member to mark notifications as read/dismissed" on public.member_notifications
  for update using (
    exists (
      select 1 from members
      where members.id = member_id
      and members.user_id = auth.uid()
    )
  );

-- Indices for better performance
create index on public.notifications (created_at desc);
create index on public.member_notifications (member_id);
create index on public.member_notifications (read_at nulls first);
create index on public.member_notifications (notification_id, member_id);
