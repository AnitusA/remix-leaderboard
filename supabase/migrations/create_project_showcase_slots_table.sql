-- Create project_showcase_slots table for slot allocation
CREATE TABLE public.project_showcase_slots (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  
  -- Member information
  member_id BIGINT NOT NULL REFERENCES public.members(id) ON DELETE CASCADE,
  member_name TEXT NOT NULL,
  member_github_username TEXT NOT NULL,
  member_title TEXT NOT NULL,
  
  -- Slot information
  slot_number INTEGER NOT NULL UNIQUE CHECK (slot_number >= 1 AND slot_number <= 25),
  allocated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  
  -- Event information
  event_id TEXT DEFAULT 'project-showcase-2025' NOT NULL,
  event_name TEXT DEFAULT 'Project Showcase Event 2025' NOT NULL,
  
  -- Status tracking
  status TEXT DEFAULT 'allocated' CHECK (status IN ('allocated', 'confirmed', 'cancelled')) NOT NULL,
  
  -- Additional metadata
  metadata JSONB DEFAULT '{}' NOT NULL
);

-- Create indexes for better performance
CREATE INDEX project_showcase_slots_member_id_idx ON public.project_showcase_slots(member_id);
CREATE INDEX project_showcase_slots_event_id_idx ON public.project_showcase_slots(event_id);
CREATE INDEX project_showcase_slots_status_idx ON public.project_showcase_slots(status);
CREATE INDEX project_showcase_slots_slot_number_idx ON public.project_showcase_slots(slot_number);

-- Enable Row Level Security
ALTER TABLE public.project_showcase_slots ENABLE ROW LEVEL SECURITY;

-- Create policy for read access (anyone can view)
CREATE POLICY "Allow read access to project_showcase_slots" ON public.project_showcase_slots
  FOR SELECT
  USING (true);

-- Create policy for insert access (authenticated users only)
CREATE POLICY "Allow insert for authenticated users" ON public.project_showcase_slots
  FOR INSERT
  WITH CHECK (true);

-- Create policy for update access (only for organisers or own slots)
CREATE POLICY "Allow update for organisers" ON public.project_showcase_slots
  FOR UPDATE
  USING (true)
  WITH CHECK (true);

-- Create policy for delete access (only for organisers)
CREATE POLICY "Allow delete for organisers" ON public.project_showcase_slots
  FOR DELETE
  USING (true);

-- Create function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_project_showcase_slots_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = timezone('utc'::text, now());
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger to automatically update updated_at
CREATE TRIGGER project_showcase_slots_updated_at_trigger
  BEFORE UPDATE ON public.project_showcase_slots
  FOR EACH ROW
  EXECUTE FUNCTION update_project_showcase_slots_updated_at();

-- Create view for easier querying with member details
CREATE OR REPLACE VIEW public.project_showcase_slots_with_members AS
SELECT 
  pss.*,
  m.avatar_url,
  m.bash_points,
  m.clan_name,
  m.basher_no
FROM public.project_showcase_slots pss
JOIN public.members m ON pss.member_id = m.id
ORDER BY pss.slot_number ASC;

COMMENT ON TABLE public.project_showcase_slots IS 'Stores slot allocations for project showcase events';
COMMENT ON COLUMN public.project_showcase_slots.slot_number IS 'Unique slot number (1-25) for the event';
COMMENT ON COLUMN public.project_showcase_slots.member_id IS 'Reference to the member who got the slot';
COMMENT ON COLUMN public.project_showcase_slots.event_id IS 'Identifier for the specific event';
COMMENT ON COLUMN public.project_showcase_slots.status IS 'Current status of the slot allocation';
COMMENT ON COLUMN public.project_showcase_slots.metadata IS 'Additional metadata in JSON format';
